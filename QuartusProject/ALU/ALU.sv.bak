module ALU(input logic [15:0] A, B,
			  input logic [3:0] ALUControl,
			  output logic [3:0] Flags,
			  output logic [15:0] RESULT);
											
					//flags 3 2 1 0
					//      N Z C V  -> N Z C V

					//ALUControl 
					//00 add
					//01 inc
					//10 cmp
					
					initial begin
						Flags = 4'b0;
					end
					
					logic cout, cmp_res;
					logic [15:0] add_res, inc_res;
					
					add ADD(A, B, 0, add_res, cout);
					add INC(A, 16'b01, 0, inc_res, cout);
					cmp CMP(A, B, cmp_res);
					
					
					
					//MUX de la alu
					mux_ALU #(N) mux_F(suma_R ,suma_R ,and_R ,or_R ,xor_R ,not_R , lsa_R, rsa_R, lsl_R, rsl_R, ALUControl, RESULT);
					
					//Calcula las flags
					flags #(N) flags_F(A,B,suma_R,RESULT,cout,ALUControl,Flags);
					
					
											
											
											
											
endmodule 
	  