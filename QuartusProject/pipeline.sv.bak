module pipeline(clk, reset);
	
	logic clk, reset;
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////// FETCH ///////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	mux_pc(PCPlus4, ALUResult_W, sel, PC_IN);
	PCREG(clk, reset, enable,PC_IN,PC); // enable from HU
	adder (PCSrc_W,4,PCPlus4);
	instructionMemory(PC, InstrF);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	pipe_FtoD(clk, reset, enable_FtoD, FlushD, // enable from HU
					InstrF, 
					InstrD);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////// DECODE///////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	decoder(InstrD, op, cond, RvD_D, RvS, RnD_D, RnSA, RnSB, Imm);
	controlUnit(op, cond, GET8_D, PCSrc_D, ScalarWrite_D, VectorWrite_D, HistogramWrite_D, MemtoReg_D, MemWrite_D, Branch_D,
					HistSrc_D, FlagWrite_D, ImmSrc_D, VectorOrHistogram_D, ALUControl_D, LaneControl_D);
	
	scalarRegisterFile(clk,ScalarWrite_W,RnSA,RnSB,RnD,ALUResult_W,R7,RnDA_D,RnDB_D); // r7?
	vectorRegisterFile(clk,VectorWrite_W,RvS,RvD,Res_W,Res_VRF);
	mux_vector(Res_VRF,Imm[2:0],V8bit);
	mux_HSrc(RnDA_D,V8bit,RhD_D);
	histogramRegisterFile(clk,HistogramWrite_W,GET8_D,RhD_D,RhD_W,RvS,Res_W,Res_HRF);
	mux_VorH (Res_HRF, Res_VRF,VectorOrHistogram_D,RvDA_D);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	pipe_DtoE(clk,reset,enable, FlushE,
					GET8_D, PCSrc_D, ScalarWrite_D, VectorWrite_D, HistogramWrite_D, MemtoReg_D, MemWrite_D, Branch_D, 
					LanesControl_D, FlagsW_D,FlagWrite_D,ALUControl_D,ImmSrc_D,RnDA_D, RnDB_D, RvDA_D,RhD_D,RvD_D,RnD_D,
					
					GET8_E, PCSrc_E, ScalarWrite_E, VectorWrite_E, HistogramWrite_E, MemtoReg_E, MemWrite_E, Branch_E, 
					LanesControl_E, FlagsW_E,FlagWrite_E,ALUControl_E,ImmSrc_E,RnDA_E, RnDB_E, RvDA_E,RhD_E,RvD_E,RnD_E);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////// EXECUTE//////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	pipe_EtoM(clk,reset,enable, Flush_M, // hazard unit 
					PCSrc_E, ScalarWrite_E, VectorWrite_E, HistogramWrite_E, MemtoReg_E, MemWrite_E,ALUResult_E, LanesResult_E,
					RhD_E,RvD_E,RnD_E,
					PCSrc_M, ScalarWrite_M, VectorWrite_M, HistogramWrite_M, MemtoReg_M, MemWrite_M,ALUResult_M, LanesResult_M,
					RhD_M,RvD_M,RnD_M);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////// MEMORY //////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	pipe_MtoW(clk, reset,enable, FlushW, // hazard unit 
					PCSrc_M, ScalarWrite_M, VectorWrite_M, HistogramWrite_M, MemtoReg_M,
					ALUResult_M,DataFromMem_M,LanesResult_M, RhD_M,	RvD_M,RnD_M,
					PCSrc_W, ScalarWrite_W, VectorWrite_W, HistogramWrite_W, MemtoReg_W,
					ALUResult_W,DataFromMem_W, LanesResult_W, RhD_W,RvD_W,RnD_W);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////// WRITEBACK ///////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	mux_WB (input logic [63:0] DataFromMem_W, LanesResult_M,
					input logic MemtoReg_W,
					output logic Res_W);
					
endmodule 