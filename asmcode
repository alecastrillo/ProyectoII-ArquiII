ImgI = Dirección de memoria donde empieza la imagen original
ImgF = Dirección de memoria donde finaliza la imagen original
NewImgF = Dirección de memoria donde finaliza la imagen ecualizada
ImgSize = Tamaño de la imagen



Init:

    load        Rn1, ImgI               // Guarda la direccion de memoria donde empieza la imagen en Rn1
    load        Rn2, ImgF               // Guarda la direccion de memoria donde finaliza la imagen en Rn2
    load        Rn3, ImgSize            // Guarda el tamaño de la imagen en Rn3
    b           BuildHistogram          // Salta al loop que recorre la imagen para construir el histograma 
    load        Rn4, 0                  // Primer registro del histograma en el que va a realizar la normalización
    load        Rn5, 64                 // Último registro del histograma en el que va a realizar la normalización
    load        Rn6, 255                // Intensidad máxima
    b Normalize                         // Salta al loop que va a normalizar el histograma
    load        Rn1, NewImgF            // Guarda la direccion de memoria donde finaliza la imagen ecualizada en Rn1
    b BuildImg                          // Crea la imagen equalizada con los valores del histograma
    b END                               // Finaliza el programa



BuildHistogram:

    load_8x8    Rv1, Rn1                // Sube 8 pixeles al registro vectorial Rv1
    divs_8x8    Rv2, Rv1, 4             // Divide los 8 pixeles entre 4 para tomar el registro del histograma al que pertenecen 
    mods_8x8    Rv2, Rv1, 4             // Asigna la posición del registro del histograma a la que pertenece cada pixel en los dos primeros bits
    inc1_4x16   Rv2, 0                  // Incrementa al registro del histograma que se indica en el vector 0 del registro Rv2
    inc1_4x16   Rv2, 1                  // Incrementa al registro del histograma que se indica en el vector 1 del registro Rv2
    inc1_4x16   Rv2, 2                  // Incrementa al registro del histograma que se indica en el vector 2 del registro Rv2
    inc1_4x16   Rv2, 3                  // Incrementa al registro del histograma que se indica en el vector 3 del registro Rv2
    inc1_4x16   Rv2, 4                  // Incrementa al registro del histograma que se indica en el vector 4 del registro Rv2
    inc1_4x16   Rv2, 5                  // Incrementa al registro del histograma que se indica en el vector 5 del registro Rv2
    inc1_4x16   Rv2, 6                  // Incrementa al registro del histograma que se indica en el vector 6 del registro Rv2
    inc1_4x16   Rv2, 7                  // Incrementa al registro del histograma que se indica en el vector 7 del registro Rv2
    add         Rn1, Rn1, 64            // Cambia la dirección para avanzar a los próximos 8 pixeles
    cmp         Rn1, Rn2                // Verifica si ha llegado al dinal de la imagen
    bnq         BuildHistogram          // Sino ha llegado al final entonces vuelve al loop
                                        // Si ha llegado al final entonces vuelve al flujo normal


Normalize:

    divs_4x16   Rn4, Rn3                // Realiza la división del primer registro vectorial del histograma entre la cantidad total de pixeles
    muls_4x16   Rn4, Rn6                // Multiplica por la intensidad máxima
    inc         Rn4                     // Pasa a normalizar el siguiente registro del histograma
    cmp         Rn4, Rn5                // Verifica si ha recorrido todo el histograma
    bnq Normalize                       // Si aún no los ha normalizado todos sigue en el loop
                                        // Si ya los normalizó todos entonces vuelve al flujo normal
    
    
BuildImg:

    load_8x8    Rv1, Rn1                // Sube 8 pixeles de la imagen original al registro vectorial Rv1
    divs_8x8    Rv2, Rv1, 4             // Divide los 8 pixeles entre 4 para tomar el registro del histograma al que pertenecen 
    mods_8x8    Rv2, Rv1, 4             // Asigna la posición del registro del histograma a la que pertenece cada pixel en los dos primeros bits
    get_8x8     Rv2, Rv2                // Toma los nuevos valores de instensidades del histograma
    store       Rv2, Rn2                // Almacena los nuevos valores de los pixeles en memoria justo después de la imagen original
    add         Rn2, Rn2, 64            // Avanza 8 pixeles 
    cmp         Rn1, Rn2                // Verifica si ya construyó la imagen por completo
    bnq         BuildImg                // Si no ha terminado continúa en el loop
                                        // Si ya terminó vuelve al flujo normal


END:    
    end
